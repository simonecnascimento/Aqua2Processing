
%% 



clear all;

% % add header to cfuInfo1 cell array
% header = {'cfuID', 'eventList', 'cfuMap','eventSeq', 'cfuCurve','cfuCurve_df','7','8'};
% cfuInfo1Features = [header; cfuInfo1];

%% 
%% Load metadata files generated by AQuA

load('D:\2photon\Simone\Simone_Macrophages\Pf4Ai162-1\221109_FOV3\AQuA2\Pf4Ai162-1_221109_FOV3_run1_reg_max_z3-8_green_Substack (1-900)_AQuA_res_cfu.mat');
load('D:\2photon\Simone\Simone_Macrophages\Pf4Ai162-1\221109_FOV3\AQuA2\Pf4Ai162-1_221109_FOV3_run1_reg_max_z3-8_green_Substack (1-900)\Pf4Ai162-1_221109_FOV3_run1_reg_max_z3-8_green_Substack (1-900)_AQuA2.mat')

%% Create a table (finalResults) with final results of all cells and median of features

%Features to remove 
rowsIndicesToDelete = [1,2,3,7,15];

%Get metadata results of ALL events
results = res.featureTable1;
expandedResults = cell2table(results.ftsTb); %expanded events without features column
expandedResults(rowsIndicesToDelete,:) = [];

%Create a finalResults table with 11 rows(features)
resultsFinal = results; %copy of metadata results table
resultsFinal.ftsTb = []; %assign empty values
resultsFinal(rowsIndicesToDelete,:) = []; %remove features

% rowNames = {
%     'Area', ...
%     'Perimeter', ...
%     'Circularity', ...
%     'P Value on max Dff (-log10)', ...
%     'Max Dff', ...
%     'Duration 50% to 50%', ...
%     'Duration 10% to 10%', ...
%     'Rising duration 10% to 90%', ...
%     'Decaying duration 90% to 10%', ...
%     'dat AUC', ...
%     'dff AUC', ...
%     'Decay tau'
%     };

%% Results of CFU

% OPTION1 - Initialize variables and create a table
cellList = cfuInfo1(:,1); % OR cell(size(cfuInfo1, 1), 1);
eventList = cfuInfo1(:,2); % OR cell(size(cfuInfo1, 1), 1);
cellList_eventList = table(cellList, eventList);

% OR

% OPTION2 - Initialize variables and create a table
cfuInfo1new = cfuInfo1; %duplicate cfuInfo cell
columnIndicesToDelete = [3,4,5,6,7,8]; %establish which features to remove from final table
cfuInfo1new(:,columnIndicesToDelete) = []; %remove features
cfuInfo1newTable = cell2table(cfuInfo1new, "VariableNames", ["cellList", "eventList"]); %convert cell array to table

% Iterate through CFU cell array
for row = 1:size(cfuInfo1, 1)

    % From one cell, extract its ID and its list of events - do for all cells
    cellID = cfuInfo1{row, 1};
    cellEvents = cfuInfo1{row, 2};

%     % Store values in the variables
%     cellList{row} = cellID;
%     eventList{row} = cellEvents;
    
    % Initialize an array to store median values for a group of events
    EventFeatures = table2array(expandedResults(:,cellEvents));
    EventFeatures_Average = array2table(mean(EventFeatures,2),"VariableNames","cell " + row);
    
    %populate resultFinal table with average of each cell, iterating cell in cellList
    resultsFinal = [resultsFinal, EventFeatures_Average];

end

% Reorganise cellList
cellList_transposed = cellList';
cellList_transposed_new = cell2table(cellList_transposed(1:end,:));
% Append this new row to the resultsFinal table
%????????????




%-----

% Create a list of cell events
nRows = size(cfuInfo1,1);
writecellEvts = {};
for cfuID = 1:numRows
    writecellEvts{cfuID} = cfuInfo1{cfuID,2};
    %cfuEvent(cfuID) = cell2table(
end




















% % Initialize an array to store median values for a group of events event
% medianValuesArray = zeros(1, numel(Events),size(yourDataTable, 1));
% 
% % Iterate over each event column number
% for i = 1:numel(eventColumnNumbersList)
%     % Extract the current event column
%     currentEventColumn = eventColumnNumbersList(i);
%     
%     % Calculate the median for all rows in the selected column
%     medianValuesArray(i) = median(yourDataTable{:, currentEventColumn});
% end
% 
% % Sample data table
% yourDataTable = table(rand(10, 15), 'VariableNames', cellstr(num2str((1:15).', 'Var_%d')));
% 
% % List of event column numbers
% 
% eventColumnNumbersList = [6; 40; 44; 48; 60; 67; 84; 87; 88; 91; 95; 99; 106];
% 
% % Initialize an array to store median values
% medianValuesArray = zeros(size(yourDataTable, 1), numel(eventColumnNumbersList));
% 
% % Iterate over each event column number
% for i = 1:numel(EventsList)
%     % Extract the current event column
%     currentEventColumn = EventsList(i);
%     
%     % Calculate the median for each row in the selected column
%     medianValuesArray(:, i) = median(yourDataTable{:, currentEventColumn}, 2);
% end



    for i = 1:numel(EventList)
    % Extract the current event column
    currentEventColumn = EventsList(i);
    
    % Calculate the median for each row in the selected column
    medianValuesArray(:, i) = median(expandedResultsTable{:, currentEventColumn}, 2);
    end

end

% Convert each nested cell to a table row
for row = 1:n(cfuInfo1)
    tableData{row} = cell2table(cfuInfo1{row}, 'VariableNames', variableNames);
end

% Create a list of cell events
nRows = size(cfuInfo1,1);
writecellEvts = {};
for cfuID = 1:numRows
    writecellEvts{cfuID} = cfuInfo1{cfuID,2};
    %cfuEvent(cfuID) = cell2table(
end
  

CFU_Id = [1,2,3]

for i = CFU_Id
    cell2table
    y(i) = cfuInfo1{i,5};
end
plot(x,y);

cfuInfo1.CFU =
for CFU = cfuInfo1.

figure;
plot(cfuInfo1{1,5});

%% 





